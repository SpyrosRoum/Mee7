CREATE TABLE IF NOT EXISTS public.settings (
	g_id int8 PRIMARY KEY,
	prefix varchar NOT NULL DEFAULT '!'::character varying,
	welcome_chn_id int8 NULL,
	welcome_msg varchar NULL,
	auto_role_id int8 NULL,
	suggestion_chn_id int8 NULL,
	rss_chn_id int8 NULL
);

CREATE TABLE IF NOT EXISTS public.rss_feeds (
	g_id int8 NOT NULL,
	feed_name varchar NOT NULL, -- Given by user
	feed_link varchar NOT NULL, -- Also by user
	feed_id int PRIMARY KEY GENERATED ALWAYS AS IDENTITY,

	CONSTRAINT rss_feeds_fk FOREIGN KEY (g_id) REFERENCES public.settings(g_id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX IF NOT EXISTS rss_feeds_g_id_link ON public.rss_feeds (g_id,feed_link);

CREATE TABLE IF NOT EXISTS public.rss_entries (
	feed_id int NOT NULL,
	entry_id varchar NOT NULL,
	title varchar NOT NULL,
	summary varchar NOT NULL,
	link varchar NOT NULL,
	published varchar NOT NULL,

	CONSTRAINT rss_entries_fk FOREIGN KEY (feed_id) REFERENCES public.rss_feeds(feed_id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX IF NOT EXISTS rss_entries_entry_id ON public.rss_entries (entry_id);


CREATE TABLE IF NOT EXISTS public.members (
    id int8 PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	g_id int8 NOT NULL,
	m_id int8 NOT NULL,
	warnings int NOT NULL DEFAULT 0,
	CONSTRAINT members_fk FOREIGN KEY (g_id) REFERENCES public.settings(g_id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX IF NOT EXISTS members_g_id_idx ON public.members (g_id,m_id);

CREATE TABLE IF NOT EXISTS public.store (
    item_id int8 PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	g_id int8 NOT NULL,
	item varchar NOT NULL,
	price float NOT NULL,
	description varchar NULL,
	CONSTRAINT store_fk FOREIGN KEY (g_id) REFERENCES public.settings(g_id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX IF NOT EXISTS store_g_id_idx ON public.store (g_id,item);


CREATE TABLE IF NOT EXISTS public.commands (
	g_id int8 NOT NULL,
	cmd_name varchar NOT NULL,
	cmd_type varchar NOT NULL,
	description varchar DEFAULT NULL,
	cooldown int DEFAULT NULL,
	reply_in_dms boolean NOT NULL,
	reply_with varchar DEFAULT NULL,
	CONSTRAINT commands_fk FOREIGN KEY (g_id) REFERENCES public.settings(g_id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX IF NOT EXISTS commands_g_id_idx ON public.commands (g_id,cmd_name);


CREATE TABLE IF NOT EXISTS public.cooldown (
	g_id int8 NOT NULL,
	m_id int8 NOT NULL,
	cmd_name varchar NOT NULL,
	did_at int8 NOT NULL,
	CONSTRAINT cooldown_fk FOREIGN KEY (g_id) REFERENCES public.settings(g_id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX IF NOT EXISTS cooldown_g_id_idx ON public.cooldown (g_id,m_id,cmd_name);


CREATE TABLE IF NOT EXISTS public.react_role (
	g_id int8 NOT NULL,
	msg_id int8 NOT NULL,
	emoji varchar NOT NULL,
	role_id int8 NOT NULL,
	CONSTRAINT react_role_fk FOREIGN KEY (g_id) REFERENCES public.settings(g_id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX IF NOT EXISTS react_role_g_id_idx ON public.react_role (g_id,msg_id,emoji);


CREATE TABLE IF NOT EXISTS public.suggestions (
	g_id bigint NOT NULL,
	m_id bigint NOT NULL,
	msg_id bigint NOT NULL,
	approved boolean NULL DEFAULT null,
	summary varchar NOT NULL,
	CONSTRAINT suggestions_fk FOREIGN KEY (g_id) REFERENCES public.settings(g_id) ON DELETE CASCADE

);
CREATE UNIQUE INDEX IF NOT EXISTS suggestions_g_id_idx ON public.suggestions (g_id,msg_id);


CREATE TABLE IF NOT EXISTS public.triggers (
	g_id bigint NOT NULL,
	trigger_ varchar NOT NULL,
	response varchar NOT NULL,
	CONSTRAINT triggers_fk FOREIGN KEY (g_id) REFERENCES public.settings(g_id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX IF NOT EXISTS triggers_g_id_trigger ON public.triggers (g_id,trigger_);


CREATE TABLE IF NOT EXISTS public.currency (
	g_id bigint NOT NULL,
	"name" varchar NOT NULL,
	short varchar NULL,
	CONSTRAINT currency_fk FOREIGN KEY (g_id) REFERENCES public.settings(g_id) ON DELETE CASCADE
);
CREATE UNIQUE INDEX IF NOT EXISTS currency_g_id_idx ON public.currency (g_id);


CREATE TABLE IF NOT EXISTS public.inventories (
	id int8 NOT NULL,
	item_id int8 NOT NULL,
	amount int NOT NULL DEFAULT 1,
	CONSTRAINT inventories_fk FOREIGN KEY (id) REFERENCES public.members(id) ON DELETE CASCADE,
	CONSTRAINT inventories_fk_1 FOREIGN KEY (item_id) REFERENCES public.store(item_id)
);



-- Column comments
COMMENT ON COLUMN public.inventories.id IS 'The internal id of the member';
COMMENT ON COLUMN public.currency.short IS 'Defaults to collumn name';
COMMENT ON COLUMN public.members.id IS 'Id to be used as a primary key internally';
